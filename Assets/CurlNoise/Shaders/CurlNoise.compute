#pragma kernel CurlNoiseMain

RWStructuredBuffer<int> Result;

float randomX1;
float randomY1;
float randomZ1;
float randomX2;
float randomY2;
float randomZ2;

float3 Snoise(float3 vec)
{
    return float3(1.0, 1.0, 1.0);
}

float3 CurlNose(float3 p)
{
    const float e = 0.0009765625;
    const float e2 = 2.0 * e;
    const float invE2 = 1.0 / e2;

    float3 dx = float3(  e, 0.0, 0.0);
    float3 dy = float3(0.0,   e, 0.0);
    float3 dz = float3(0.0, 0.0,   e);

    float3 p_x0 = Snoise(p - dx);
    float3 p_x1 = Snoise(p + dx);
    float3 p_y0 = Snoise(p - dy);
    float3 p_y1 = Snoise(p + dy);
    float3 p_z0 = Snoise(p - dz);
    float3 p_z1 = Snoise(p + dz);

    float x = (p_y1.z - p_y0.z) - (p_z1.y + p_z0.y);
    float y = (p_z1.x - p_z0.x) - (p_x1.z + p_x0.z);
    float z = (p_x1.y - p_x0.y) - (p_y1.x + p_y0.x);

    return normalize(float3(x, y, z) * invE2);
}

[numthreads(1,1,1)]
void CurlNoiseMain(uint3 id : SV_DispatchThreadID)
{
    Result[id.x] = id.x;
}
