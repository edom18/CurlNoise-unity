#pragma kernel CurlNoiseMain

#include "SimplexNoise.cginc"
#include "NoiseMath.cginc"

StructuredBuffer<int> _P;

int _Octaves;
float _Fx;
float _Fy;

inline float Noise(float2 vec);
float Noise(float3 vec);

struct Particle
{
    int id;
    bool active;
    float3 position;
    float3 velocity;
    float3 color;
    float scale;
    float time;
    float lifeTime;
};

RWStructuredBuffer<Particle> _Particles;

float _SpeedFactor;
float _DeltaTime;

float3 _SphereCenter;
float _SphereRadius;
float _NoiseScale;
float _CurlNoiseIntencity;

float3 ComputeGradient(float3 p);
float3 Pnoise(float3 vec);

// ふたつのベクトルを合成する
float3 BlendVectors(float3 potential, float3 normal, float alpha)
{
    // (N・ψ(X))を計算する
    float dp = dot(potential, normal);

    // ψ_constrained(X) = αψ(X) + (1 - α)N(N・ψ(X))
    return alpha * potential + (1.0 - alpha) * dp * normal;
}

// 計算点から、障害物への距離を計算する
float SampleDistance(float3 p)
{
    float3 u = p - _SphereCenter;
    float d = length(u);
    return d - _SphereRadius;
}

// α = ramp(d(x)/d0)
// ψ_constrainted(x) = αψ(x) + (1 - α)n(n・ψ(x))
float3 SamplePotential(float3 pos)
{
    float3 normal = ComputeGradient(pos);
    float obstacleDistance = SampleDistance(pos);

    float alpha = abs(Ramp(obstacleDistance / _NoiseScale));

    float3 scaledPos = pos / _NoiseScale;
    //float3 psi = Snoise(scaledPos);
    float3 psi = Pnoise(scaledPos);

    return BlendVectors(psi, normal, alpha);
}


// 勾配（gradient）を計算する
// 基本的な考えは偏微分が法線ベクトルとなることを利用している？
float3 ComputeGradient(float3 p)
{
    const float e = 0.01f;

    // 偏微分するため、各軸の微小値を計算する
    const float3 dx = float3(e, 0, 0);
    const float3 dy = float3(0, e, 0);
    const float3 dz = float3(0, 0, e);

    float d = SampleDistance(p);
    float dfdx = SampleDistance(p + dx) - d;
    float dfdy = SampleDistance(p + dy) - d;
    float dfdz = SampleDistance(p + dz) - d;

    return normalize(float3(dfdx, dfdy, dfdz));
}


float PerlinNoise(float2 vec)
{
    float result = 0;
    float amp = 1.0;

    for (int i = 0; i < _Octaves; i++)
    {
        result += Noise(vec) * amp;
        vec *= 2.0;
        amp *= 0.5;
    }

    return result;
}

float PerlinNoise(float3 vec)
{
    float result = 0;
    float amp = 1.0;

    for (int i = 0; i < _Octaves; i++)
    {
        result += Noise(vec) * amp;
        vec *= 2.0;
        amp *= 0.5;
    }

    return result;
}

inline float Noise(float2 vec)
{
    return Noise(float3(vec, 0));
}

float Noise(float3 vec)
{
    int X = (int)floor(vec.x) & 255;
    int Y = (int)floor(vec.y) & 255;
    int Z = (int)floor(vec.z) & 255;

    vec.x -= floor(vec.x);
    vec.y -= floor(vec.y);
    vec.z -= floor(vec.z);

    float u = Fade(vec.x);
    float v = Fade(vec.y);
    float w = Fade(vec.z);

    int A, AA, AB, B, BA, BB;

    A = _P[X + 0] + Y; AA = _P[A] + Z; AB = _P[A + 1] + Z;
    B = _P[X + 1] + Y; BA = _P[B] + Z; BB = _P[B + 1] + Z;

    return Lerp(w, Lerp(v, Lerp(u, Grad(_P[AA + 0], vec.x + 0, vec.y + 0, vec.z + 0),
                                   Grad(_P[BA + 0], vec.x - 1, vec.y + 0, vec.z + 0)),
                           Lerp(u, Grad(_P[AB + 0], vec.x + 0, vec.y - 1, vec.z + 0),
                                   Grad(_P[BB + 0], vec.x - 1, vec.y - 1, vec.z + 0))),
                   Lerp(v, Lerp(u, Grad(_P[AA + 1], vec.x + 0, vec.y + 0, vec.z - 1),
                                   Grad(_P[BA + 1], vec.x - 1, vec.y + 0, vec.z - 1)),
                           Lerp(u, Grad(_P[AB + 1], vec.x + 0, vec.y - 1, vec.z - 1),
                                   Grad(_P[BB + 1], vec.x - 1, vec.y - 1, vec.z - 1))));
}

// パーリンノイズによるベクトル場
// 3Dとして3要素を計算。
// それぞれのノイズは明らかに違う（極端に大きなオフセット）を持たせた値とする
float3 Pnoise(float3 vec)
{
    float x = PerlinNoise(vec);

    float y = PerlinNoise(float3(
        vec.y + 31.416,
        vec.z - 47.853,
        vec.x + 12.793
    ));

    float z = PerlinNoise(float3(
        vec.z - 233.145,
        vec.x - 113.408,
        vec.y - 185.31
    ));

    return float3(x, y, z);
}


float3 CurlNoise(float3 p)
{
    const float e = 1e-4;
    //const float e = 0.0009765625;
    const float e2 = 2.0 * e;
    const float invE2 = 1.0 / e2;

    float3 dx = float3(  e, 0.0, 0.0);
    float3 dy = float3(0.0,   e, 0.0);
    float3 dz = float3(0.0, 0.0,   e);

    float3 p_x0 = SamplePotential(p - dx);
    float3 p_x1 = SamplePotential(p + dx);
    float3 p_y0 = SamplePotential(p - dy);
    float3 p_y1 = SamplePotential(p + dy);
    float3 p_z0 = SamplePotential(p - dz);
    float3 p_z1 = SamplePotential(p + dz);

    float x = (p_y1.z - p_y0.z) - (p_z1.y + p_z0.y);
    float y = (p_z1.x - p_z0.x) - (p_x1.z + p_x0.z);
    float z = (p_x1.y - p_x0.y) - (p_y1.x + p_y0.x);

    return float3(x, y, z) * invE2;
}

[numthreads(8,1,1)]
void CurlNoiseMain(uint id : SV_DispatchThreadID)
{
    float3 input = _Particles[id].position;

    float3 velocity = CurlNoise(input) * _CurlNoiseIntencity;

    _Particles[id].time += _DeltaTime;
    float scale = 1.0 - (_Particles[id].time / _Particles[id].lifeTime);
    _Particles[id].velocity = velocity * _SpeedFactor;
    _Particles[id].position += _Particles[id].velocity * _DeltaTime;

    if (scale < 0)
    {
        _Particles[id].active = false;
        scale = 0;
    }

    _Particles[id].scale = scale;
}
