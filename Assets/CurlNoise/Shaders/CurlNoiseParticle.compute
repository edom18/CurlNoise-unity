#pragma kernel CurlNoiseMain

StructuredBuffer<int> _P;

int _Octaves;
float _Fx;
float _Fy;

inline float Noise(float2 vec);
float Noise(float3 vec);

struct Particle
{
    int id;
    bool active;
    float3 position;
    float3 velocity;
    float3 color;
    float scale;
    float time;
    float lifeTime;
};

RWStructuredBuffer<Particle> _Particles;

float _RandomX1;
float _RandomY1;
float _RandomZ1;
float _RandomX2;
float _RandomY2;
float _RandomZ2;

float _SpeedFactor;
float _DeltaTime;

float3 _SphereCenter;
float _SphereRadius;
float _NoiseScale;

float3 ComputeGradient(float3 p);
float3 Snoise(float3 vec);
float3 Pnoise(float3 vec);

// Ramp関数
float Ramp(float r)
{
    if (r >= 1.0)
    {
        return 1.0;
    }
    else if (r <= -1.0)
    {
        return -1.0;
    }
    else
    {
        // ((15.0 / 8.0) * r) - ((10.0 / 8.0) * (r * r * r)) + ((3.0 / 8.0) * (r * r * r * r * r))
        return (1.875 * r) - (1.25 * (r * r * r)) + (0.375 * (r * r * r * r * r));
    }
}

// ふたつのベクトルを合成する
float3 BlendVectors(float3 potential, float3 normal, float alpha)
{
    // (N・ψ(X))を計算する
    float dp = dot(potential, normal);

    // ψ_constrained(X) = αψ(X) + (1 - α)N(N・ψ(X))
    return alpha * potential + (1.0 - alpha) * dp * normal;
}

// 計算点から、障害物への距離を計算する
float SampleDistance(float3 p)
{
    float3 u = p - _SphereCenter;
    float d = length(u);
    return d - _SphereRadius;
}

//float3 SamplePotential(float3 p)
//{
//    float3 psi = float3(0, 0, 0);
//
//    float3 gradient = ComputeGradient(p);
//    float obstacleDistance = SampleDistance(p);
//
//    float d = abs(Ramp(obstacleDistance / _NoiseScale));
//
//    //float3 noise = Snoise(p / _NoiseScale);
//    float3 noise = Pnoise(p / _NoiseScale);
//
//    float3 velocity = BlendVectors(noise, gradient, d);
//
//    psi += velocity;
//
//    return psi;
//}

float3 SamplePotential(float3 p)
{
    float3 newP = p / _NoiseScale;

    float3 gradient = ComputeGradient(newP);
    float obstacleDistance = SampleDistance(newP);

    float d = abs(Ramp(obstacleDistance / _NoiseScale));

    float3 noise = Pnoise(newP);

    return BlendVectors(noise, gradient, d);
}


// 勾配（gradient）を計算する
// 基本的な考えは偏微分が勾配ベクトルとなることを利用している？
float3 ComputeGradient(float3 p)
{
    const float e = 0.01f;

    // 偏微分するため、各軸の微小値を計算する
    float3 dx = float3(e, 0, 0);
    float3 dy = float3(0, e, 0);
    float3 dz = float3(0, 0, e);

    float d = SampleDistance(p);
    float dfdx = SampleDistance(p + dx) - d;
    float dfdy = SampleDistance(p + dy) - d;
    float dfdz = SampleDistance(p + dz) - d;

    return normalize(float3(dfdx, dfdy, dfdz));
}

float3 Mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 Mod289(float4 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float4 Permute(float4 x)
{
    return Mod289(((x * 34.0) + 1.0) * x);
}

float4 TaylorInvSqrt(float4 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

float SnoiseScalar(float3 v)
{
    const float2 C = float2(1.0 / 6.0, 1.0 / 3.0);
    const float4 D = float4(0.0, 0.5, 1.0, 2.0);

    // First Corner
    float3 i = floor(v + dot(v, C.yyy));
    float3 x0 = v - i + dot(i, C.xxx);

    // Other Corners
    float3 g = step(x0.yzx, x0.xyz);
    float3 l = 1.0 - g;
    float3 i1 = min(g.xyz, l.zxy);
    float3 i2 = max(g.xyz, l.zxy);

    // x0 = x0 - 0.0 + 0.0 * C.xxx;
    // x1 = x0 -  i1 + 1.0 * C.xxx;
    // x2 = x0 -  i2 + 2.0 * C.xxx;
    // x3 = x0 - 1.0 + 3.0 * C.xxx;
    float3 x1 = x0 - i1 + C.xxx;
    float3 x2 = x0 - i2 + C.yyy; //  2.0 * C.x = 1 / 3 = C.y
    float3 x3 = x0 - D.yyy;      // -1.0 + 3.0 * C.x = -0.5 = -D.y

    // Permutations
    i = Mod289(i);

    float4 p = Permute(Permute(Permute(
          i.z + float4(0.0, i1.z, i2.z, 1.0))
        + i.y + float4(0.0, i1.y, i2.y, 1.0))
        + i.x + float4(0.0, i1.x, i2.x, 1.0));

    // Gradients: 7x7 points over a square, mapped onto an octahedron.
    // The ring size 17*17 = 289 is close to a multiple of 49 (49 * 6 = 294)
    float n_ = 0.142857142857; // 1.0 / 7.0
    float3 ns = n_ * D.wyz - D.xzx;

    float4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p, 7*7)

    float4 x_ = floor(j * ns.z);
    float4 y_ = floor(j - 7.0 * x_); // mod(j, N);

    float4 x = x_ * ns.x + ns.yyyy;
    float4 y = y_ * ns.x + ns.yyyy;
    float4 h = 1.0 - abs(x) - abs(y);

    float4 b0 = float4(x.xy, y.xy);
    float4 b1 = float4(x.zw, y.zw);

    // float4 s0 = float4(lessThan(b0, 0.0)) * 2.0 - 1.0;
    // float4 s1 = float4(lessThan(b1, 0.0)) * 2.0 - 1.0;
    float4 s0 = floor(b0) * 2.0 + 1.0;
    float4 s1 = floor(b1) * 2.0 + 1.0;
    float4 sh = -step(h, float4(0.0, 0.0, 0.0, 0.0));

    float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
    float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;

    float3 p0 = float3(a0.xy, h.x);
    float3 p1 = float3(a0.zw, h.y);
    float3 p2 = float3(a1.xy, h.z);
    float3 p3 = float3(a1.zw, h.w);

    // Normalise gradients
    float4 norm = TaylorInvSqrt(float4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));

    p0 *= norm.x;
    p1 *= norm.y;
    p3 *= norm.z;
    p0 *= norm.w;

    // Mix final noise value
    float4 m = max(0.6 - float4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);
    m = m * m;

    return 42.0 * dot(m * m, float4(
        dot(p0, x0),
        dot(p1, x2),
        dot(p2, x2),
        dot(p3, x3)
    ));
}



float Fade(float t)
{
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}

float Lerp(float t, float a, float b)
{
    return a + t * (b - a);
}

float Grad(int hash, float x, float y, float z)
{
    int h = hash & 15;
    float u = (h < 8) ? x : y;
    float v = (h < 4) ? y : (h == 12 || h == 14) ? x : z;
    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
}

float PerlinNoise(float2 vec)
{
    float result = 0;
    float amp = 1.0;

    for (int i = 0; i < _Octaves; i++)
    {
        result += Noise(vec) * amp;
        vec *= 2.0;
        amp *= 0.5;
    }

    return result;
}

float PerlinNoise(float3 vec)
{
    float result = 0;
    float amp = 1.0;

    for (int i = 0; i < _Octaves; i++)
    {
        result += Noise(vec) * amp;
        vec *= 2.0;
        amp *= 0.5;
    }

    return result;
}

inline float Noise(float2 vec)
{
    return Noise(float3(vec, 0));
}

float Noise(float3 vec)
{
    int X = (int)floor(vec.x) & 255;
    int Y = (int)floor(vec.y) & 255;
    int Z = (int)floor(vec.z) & 255;

    vec.x -= floor(vec.x);
    vec.y -= floor(vec.y);
    vec.z -= floor(vec.z);

    float u = Fade(vec.x);
    float v = Fade(vec.y);
    float w = Fade(vec.z);

    int A, AA, AB, B, BA, BB;

    A = _P[X + 0] + Y; AA = _P[A] + Z; AB = _P[A + 1] + Z;
    B = _P[X + 1] + Y; BA = _P[B] + Z; BB = _P[B + 1] + Z;

    return Lerp(w, Lerp(v, Lerp(u, Grad(_P[AA + 0], vec.x + 0, vec.y + 0, vec.z + 0),
                                   Grad(_P[BA + 0], vec.x - 1, vec.y + 0, vec.z + 0)),
                           Lerp(u, Grad(_P[AB + 0], vec.x + 0, vec.y - 1, vec.z + 0),
                                   Grad(_P[BB + 0], vec.x - 1, vec.y - 1, vec.z + 0))),
                   Lerp(v, Lerp(u, Grad(_P[AA + 1], vec.x + 0, vec.y + 0, vec.z - 1),
                                   Grad(_P[BA + 1], vec.x - 1, vec.y + 0, vec.z - 1)),
                           Lerp(u, Grad(_P[AB + 1], vec.x + 0, vec.y - 1, vec.z - 1),
                                   Grad(_P[BB + 1], vec.x - 1, vec.y - 1, vec.z - 1))));
}

float3 Pnoise(float3 vec)
{
    float x = PerlinNoise(vec);

    float y = PerlinNoise(float3(
        vec.y + 31.416,
        vec.z - 47.853,
        vec.x + 12.793
    ));

    float z = PerlinNoise(float3(
        vec.z - 233.145,
        vec.x - 113.408,
        vec.y - 185.31
    ));

    return float3(x, y, z);
}


// シンプレクスノイズ関数
// 3Dとして3要素を計算。
// それぞれのノイズは明らかに違う（極端に大きなオフセット）を持たせた値とする
// Reference: https://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph2007-curlnoise.pdf
float3 Snoise(float3 vec)
{
    float x = SnoiseScalar(vec);

    float y = SnoiseScalar(float3(
        vec.y + 31.416,
        vec.z - 47.853,
        vec.x + 12.793
    ));

    float z = SnoiseScalar(float3(
        vec.z - 233.145,
        vec.x - 113.408,
        vec.y - 185.31
    ));

    return float3(x, y, z);
}

float3 CurlNoise(float3 p)
{
    const float e = 0.0009765625;
    const float e2 = 2.0 * e;
    const float invE2 = 1.0 / e2;

    float3 dx = float3(  e, 0.0, 0.0);
    float3 dy = float3(0.0,   e, 0.0);
    float3 dz = float3(0.0, 0.0,   e);

    float3 p_x0 = SamplePotential(p - dx);
    float3 p_x1 = SamplePotential(p + dx);
    float3 p_y0 = SamplePotential(p - dy);
    float3 p_y1 = SamplePotential(p + dy);
    float3 p_z0 = SamplePotential(p - dz);
    float3 p_z1 = SamplePotential(p + dz);

    float x = (p_y1.z - p_y0.z) - (p_z1.y + p_z0.y);
    float y = (p_z1.x - p_z0.x) - (p_x1.z + p_x0.z);
    float z = (p_x1.y - p_x0.y) - (p_y1.x + p_y0.x);

    return float3(x, y, z) * invE2;
}

[numthreads(8,1,1)]
void CurlNoiseMain(uint id : SV_DispatchThreadID)
{
    float3 input = _Particles[id].position;

    float3 velocity = CurlNoise(input);

    _Particles[id].time += _DeltaTime;
    float scale = 1.0 - (_Particles[id].time / _Particles[id].lifeTime);
    _Particles[id].velocity += velocity * _SpeedFactor;// *scale;
    _Particles[id].position += _Particles[id].velocity * _DeltaTime;

    if (scale < 0)
    {
        _Particles[id].active = false;
        scale = 0;
    }

    _Particles[id].scale = scale;
}
